scalar DateTime

interface Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Query {
  user(id: ID!): User!
  users(paginationInput: PaginationInput): UsersConnection!
  posts(paginationInput: PaginationInput): PostsConnection!
}

type Mutation {
  registerUser(registerInput: RegisterUserInput!): AuthPayload!
  login(loginInput: LoginInput!): AuthPayload!
  post(postInput: CreatePostInput!): Post!
  updatePost(postInput: UpdatePostInput!): Post!
  deletePost(id: ID!): Post!
  toggleLike(postId: ID!): Like!
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  username: String
  email: String
  posts(paginationInput: PaginationInput): PostsConnection!
  likes: [Like!]!
}

type AuthPayload {
  token: String!
  user: User!
}

input RegisterUserInput {
  username: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreatePostInput {
  title: String!
  description: String
  body: String
}

input UpdatePostInput {
  id: ID!
  title: String!
  description: String
  body: String
}

input PaginationInput {
  first: Int
  last: Int
  before: String
  after: String
}

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  title: String!
  description: String
  body: String
  user: User!
  likes: [Like!]!
}

type PostEdge {
  node: Post!
}

type UserEdge {
  node: User!
}

type PostsConnection {
  count: Int!
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type UsersConnection {
  count: Int!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type Like implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  user: User
  post: Post
}
